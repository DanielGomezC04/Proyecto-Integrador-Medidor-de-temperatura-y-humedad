const { Board, Sensor, LCD } = require("johnny-five");
const DHT = require("dht-sensor");
const fs = require("fs");
const tf = require("@tensorflow/tfjs-node");
const board = new Board();

let datosRecolectados = [];

board.on("ready", () => {
  console.log("Placa conectada. Iniciando sensores...");

  const humedadSuelo = new Sensor("A0");

  // Configuración del LCD (ajusta según tu módulo)
  const lcd = new LCD({
    controller: "PCF8574" // Si es un LCD I2C, usa este controlador
  });

  lcd.print("Sistema listo...");

  function leerDHT11() {
    const lectura = DHT.read(11, 2); // DHT11 en el pin 2
    return {
      temperatura: lectura.temperature.toFixed(2),
      humedadAire: lectura.humidity.toFixed(2),
    };
  }

  setInterval(() => {
    const humedadTierra = humedadSuelo.value;
    const { temperatura, humedadAire } = leerDHT11();

    const datos = {
      timestamp: new Date().toISOString(),
      temperatura: parseFloat(temperatura),
      humedadAire: parseFloat(humedadAire),
      humedadSuelo: humedadTierra,
    };

    console.log("Dato:", datos);
    datosRecolectados.push(datos);

    // Mostrar datos en la pantalla LCD
    lcd.clear();
    lcd.print(`Temp: ${temperatura}C`);
    lcd.cursor(1, 0);
    lcd.print(`Humedad suelo: ${humedadTierra}`);

    fs.readFile("datos_sensor.json", "utf8", (err, data) => {
      let datosExistentes = [];
      if (!err && data.trim().length > 0) {
        datosExistentes = JSON.parse(`[${data.slice(0, -2)}]`);
      }
      datosExistentes.push(datos);

      fs.writeFile("datos_sensor.json", JSON.stringify(datosExistentes, null, 2), (err) => {
        if (err) console.error("Error al guardar datos:", err);
      });
    });

    if (datosRecolectados.length === 30) {
      entrenarIA(datosRecolectados);
      datosRecolectados = []; // Reiniciar para siguiente entrenamiento
    }
  }, 1000); // Captura datos cada segundo
});

async function entrenarIA(datos) {
  console.log("Entrenando IA con los primeros 30 datos...");

  const X = datos.map(d => [d.humedadSuelo, d.humedadAire]);
  const Y = datos.map(d => d.temperatura);

  const xs = tf.tensor2d(X, [X.length, 2]);
  const ys = tf.tensor2d(Y, [Y.length, 1]);

  const model = tf.sequential();
  model.add(tf.layers.dense({ units: 10, inputShape: [2], activation: "relu" }));
  model.add(tf.layers.dense({ units: 1 }));

  model.compile({ optimizer: "sgd", loss: "meanSquaredError" });

  await model.fit(xs, ys, { epochs: 50 });
  console.log("IA entrenada. Probando predicción...");

  const input = tf.tensor2d([[400, 65]]); // Prueba con humedad de suelo y aire
  const prediccion = model.predict(input);
  prediccion.print();
}
